let lower = ReactDOMRe.createDOMElementVariadic "div" [||]
let upper = React.createElement Input.make (Input.makeProps ())
let lower_with_empty_attr =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps ~className:(("")[@reason.raw_literal ""]) ())
    [||]
let lower_opt_attr =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps ?tabIndex ()) [||]
let lower_inner_html =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps
              ~dangerouslySetInnerHTML:([%bs.obj { __html = text }]) ()) 
    [||]
let lower_with_style =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps
              ~style:((ReactDOM.Style.make ~backgroundColor:(("gainsboro")
                         [@reason.raw_literal "gainsboro"]) ())
              [@reason.preserve_braces ]) ()) [||]
let fragment foo = ((ReactDOMRe.createElement ReasonReact.fragment [|foo|])
  [@bla ])
let polyChildrenFragment foo bar =
  ReactDOMRe.createElement ReasonReact.fragment [|foo;bar|]
let nestedFragment foo bar baz =
  ReactDOMRe.createElement ReasonReact.fragment
    [|foo;(ReactDOMRe.createElement ReasonReact.fragment [|bar;baz|])|]
let nestedFragmentWithlower foo =
  ReactDOMRe.createElement ReasonReact.fragment
    [|(ReactDOMRe.createDOMElementVariadic "div" [|foo|])|]
let upper = React.createElement Upper.make (Upper.makeProps ())
let upperWithProp =
  React.createElement Upper.make (Upper.makeProps ~count ())
let upperWithChild foo =
  React.createElement Upper.make (Upper.makeProps ~children:foo ())
let upperWithChildren foo bar =
  React.createElementVariadic Upper.make
    (Upper.makeProps ~children:React.null ()) [|foo;bar|]
let lowerWithChildAndProps foo =
  ReactDOMRe.createDOMElementVariadic "a"
    ~props:(ReactDOMRe.domProps ~tabIndex:1 ~href:(("https://example.com")
              [@reason.raw_literal "https://example.com"]) ()) [|foo|]
let lowerWithChildren foo bar =
  ReactDOMRe.createDOMElementVariadic "lower" [|foo;bar|]
let nestedElement =
  React.createElement Foo.Bar.make
    (Foo.Bar.makeProps ~a:1 ~b:(("1")[@reason.raw_literal "1"]) ())
let t =
  React.createElement FancyButton.make
    (FancyButton.makeProps ~ref:buttonRef
       ~children:(ReactDOMRe.createDOMElementVariadic "div" [||]) ())
let t =
  ReactDOMRe.createDOMElementVariadic "button"
    ~props:(ReactDOMRe.domProps ~ref ~className:(("FancyButton")
              [@reason.raw_literal "FancyButton"]) ()) [|children|]
let lowerWithChildrenComplex =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps ~className:(("flex-container")
              [@reason.raw_literal "flex-container"]) ())
    [|(ReactDOMRe.createDOMElementVariadic "div"
         ~props:(ReactDOMRe.domProps ~className:(("sidebar")
                   [@reason.raw_literal "sidebar"]) ())
         [|(ReactDOMRe.createDOMElementVariadic "h2"
              ~props:(ReactDOMRe.domProps ~className:(("title")
                        [@reason.raw_literal "title"]) ())
              [|(((("jsoo-react")[@reason.raw_literal "jsoo-react"]) |> s)
                [@reason.preserve_braces ])|]);(ReactDOMRe.createDOMElementVariadic
                                                  "nav"
                                                  ~props:(ReactDOMRe.domProps
                                                            ~className:(("menu")
                                                            [@reason.raw_literal
                                                              "menu"]) ())
                                                  [|(ReactDOMRe.createDOMElementVariadic
                                                       "ul"
                                                       [|(((examples |>
                                                              (List.map
                                                                 (fun e ->
                                                                    ((
                                                                    ReactDOMRe.createDOMElementVariadic
                                                                    "li"
                                                                    ~props:(
                                                                    ReactDOMRe.domProps
                                                                    ~key:((
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ]) ())
                                                                    [|(
                                                                    ReactDOMRe.createDOMElementVariadic
                                                                    "a"
                                                                    ~props:(
                                                                    ReactDOMRe.domProps
                                                                    ~href:((
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ])
                                                                    ~onClick:((
                                                                    fun event
                                                                    ->
                                                                    ((ReactEvent.Mouse.preventDefault
                                                                    event;
                                                                    ReactRouter.push
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ]))
                                                                    [@reason.preserve_braces
                                                                    ]) ())
                                                                    [|((
                                                                    e.title
                                                                    |> s)
                                                                    [@reason.preserve_braces
                                                                    ])|])|])
                                                                    [@reason.preserve_braces
                                                                    ]))))
                                                             |> React.list)
                                                         [@reason.preserve_braces
                                                           ])|])|])|])|]
external makeProps :
  ?name:'name -> ?key:string -> unit -> < name: 'name option   >  Js.t = ""
[@@bs.obj ]
let make =
  ((fun ?(name= (("")[@reason.raw_literal ""])) ->
      ((ReactDOMRe.createElement ReasonReact.fragment
          [|(ReactDOMRe.createDOMElementVariadic "div"
               [|((React.string
                     ((("First ")[@reason.raw_literal "First "]) ^ name))
                 [@reason.preserve_braces ])|]);(React.createElement
                                                   Hello.make
                                                   (Hello.makeProps
                                                      ~one:(("1")
                                                      [@reason.raw_literal
                                                        "1"])
                                                      ~children:((React.string
                                                                    (
                                                                    (("2nd ")
                                                                    [@reason.raw_literal
                                                                    "2nd "])
                                                                    ^ name))
                                                      [@reason.preserve_braces
                                                        ]) ()))|])
      [@reason.preserve_braces ]))
  [@warning "-16"])
let make =
  let Test_reason (Props : < name: 'name option   >  Js.t) =
    make ?name:(Props ## name) in
  Test_reason
external makeProps :
  ?name:'name -> ?key:string -> unit -> < name: 'name option   >  Js.t = ""
[@@bs.obj ]
let make =
  ((fun ?(name= (("")[@reason.raw_literal ""])) ->
      ((ReactDOMRe.createElement ReasonReact.fragment
          [|(ReactDOMRe.createDOMElementVariadic "div"
               [|((React.string
                     ((("First ")[@reason.raw_literal "First "]) ^ name))
                 [@reason.preserve_braces ])|]);(React.createElement
                                                   Hello.make
                                                   (Hello.makeProps
                                                      ~one:(("1")
                                                      [@reason.raw_literal
                                                        "1"])
                                                      ~children:((React.string
                                                                    (
                                                                    (("2nd ")
                                                                    [@reason.raw_literal
                                                                    "2nd "])
                                                                    ^ name))
                                                      [@reason.preserve_braces
                                                        ]) ()))|])
      [@reason.preserve_braces ]))
  [@warning "-16"])
let make =
  let Test_reason (Props : < name: 'name option   >  Js.t) =
    make ?name:(Props ## name) in
  Test_reason
module Module_component_with_props =
  struct
    external makeProps :
      lola:'lola ->
        cosis:'cosis ->
          ?key:string -> unit -> < lola: 'lola  ;cosis: 'cosis   >  Js.t = ""
    [@@bs.obj ]
    let make =
      ((fun ~lola ->
          ((fun ~cosis ->
              ((Js.log cosis;
                ReactDOMRe.createDOMElementVariadic "div"
                  [|((React.string lola)[@reason.preserve_braces ])|])
              [@reason.preserve_braces ]))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Test_reason$Module_component_with_props
        (Props : < lola: 'lola  ;cosis: 'cosis   >  Js.t) =
        make ~cosis:(Props ## cosis) ~lola:(Props ## lola) in
      Test_reason$Module_component_with_props
  end
let upper_create_element =
  React.createElement Module_component_with_props.make
    (Module_component_with_props.makeProps ~lola:(("flores")
       [@reason.raw_literal "flores"]) ())
module Memo =
  struct
    external makeProps :
      a:'a -> ?key:string -> unit -> < a: 'a   >  Js.t = ""[@@bs.obj ]
    let make =
      ((fun ~a ->
          ((ReactDOMRe.createDOMElementVariadic "div"
              [|(((Printf.sprintf (("`a` is %s")
                     [@reason.raw_literal "`a` is %s"]) a)
                    |> React.string)
                [@reason.preserve_braces ])|])
          [@reason.preserve_braces ]))
      [@warning "-16"])
    let make =
      React.memo
        (let Test_reason$Memo (Props : < a: 'a   >  Js.t) =
           make ~a:(Props ## a) in
         Test_reason$Memo)
  end
module MemoCustomCompareProps =
  struct
    external makeProps :
      value:string -> ?key:string -> unit -> < value: string   >  Js.t = ""
    [@@bs.obj ]
    let make =
      ((fun ~value:(value : string) ->
          ((ReactDOMRe.createDOMElementVariadic "div"
              [|(ReactDOMRe.createDOMElementVariadic "span"
                   [|((value |> React.string)[@reason.preserve_braces ])|])|])
          [@reason.preserve_braces ]))
      [@warning "-16"])
    let make =
      let Test_reason$MemoCustomCompareProps
        (Props : < value: string   >  Js.t) = make ~value:(Props ## value) in
      Test_reason$MemoCustomCompareProps
    let make =
      React.memoCustomCompareProps make
        (fun next -> fun current -> (next ## value) = (current ## value))
  end
external makeProps :
  children:'children ->
    buttonRef:'buttonRef ->
      ?key:string ->
        unit -> < children: 'children  ;buttonRef: 'buttonRef   >  Js.t = ""
[@@bs.obj ]
let make =
  ((fun ~children ->
      ((fun ~buttonRef ->
          ((ReactDOMRe.createDOMElementVariadic "button"
              ~props:(ReactDOMRe.domProps ~ref:buttonRef
                        ~className:(("FancyButton")
                        [@reason.raw_literal "FancyButton"]) ()) [|children|])
          [@reason.preserve_braces ]))
      [@warning "-16"]))
  [@warning "-16"])
let make =
  React.forwardRef
    (let Test_reason
       (Props : < children: 'children  ;buttonRef: 'buttonRef   >  Js.t) =
       make ~buttonRef:(Props ## buttonRef) ~children:(Props ## children) in
     Test_reason)
let testAttributes =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps ~translate:(("yes")
              [@reason.raw_literal "yes"]) ())
    [|(ReactDOMRe.createDOMElementVariadic "picture"
         ~props:(ReactDOMRe.domProps ~id:(("idpicture")
                   [@reason.raw_literal "idpicture"]) ())
         [|(ReactDOMRe.createDOMElementVariadic "img"
              ~props:(ReactDOMRe.domProps ~src:(("picture/img.png")
                        [@reason.raw_literal "picture/img.png"])
                        ~alt:(("test picture/img.png")
                        [@reason.raw_literal "test picture/img.png"])
                        ~id:(("idimg")[@reason.raw_literal "idimg"]) ()) 
              [||]);(ReactDOMRe.createDOMElementVariadic "source"
                       ~props:(ReactDOMRe.domProps ~type_:(("image/webp")
                                 [@reason.raw_literal "image/webp"])
                                 ~src:(("picture/img1.webp")
                                 [@reason.raw_literal "picture/img1.webp"])
                                 ()) [||]);(ReactDOMRe.createDOMElementVariadic
                                              "source"
                                              ~props:(ReactDOMRe.domProps
                                                        ~type_:(("image/jpeg")
                                                        [@reason.raw_literal
                                                          "image/jpeg"])
                                                        ~src:(("picture/img2.jpg")
                                                        [@reason.raw_literal
                                                          "picture/img2.jpg"])
                                                        ()) [||])|])|]
let randomElement =
  ReactDOMRe.createDOMElementVariadic "text"
    ~props:(ReactDOMRe.domProps ~dx:(("1 2")[@reason.raw_literal "1 2"])
              ~dy:(("3 4")[@reason.raw_literal "3 4"]) ()) [||]
external makeProps :
  name:'name ->
    ?isDisabled:'isDisabled ->
      ?key:string ->
        unit -> < name: 'name  ;isDisabled: 'isDisabled option   >  Js.t = ""
[@@bs.obj ]
let make =
  ((fun ~name ->
      ((fun ?isDisabled ->
          ((let onClick event = Js.log event in
            ReactDOMRe.createDOMElementVariadic "button"
              ~props:(ReactDOMRe.domProps ~name ~onClick ~disabled:isDisabled
                        ()) [||])
          [@reason.preserve_braces ]))
      [@warning "-16"]))
  [@warning "-16"])
let make =
  let Test_reason
    (Props : < name: 'name  ;isDisabled: 'isDisabled option   >  Js.t) =
    make ?isDisabled:(Props ## isDisabled) ~name:(Props ## name) in
  Test_reason
let () = Module.fn ()
let l = 33
module External =
  struct
    external componentProps :
      a:int ->
        b:string -> ?key:string -> unit -> < a: int  ;b: string   >  Js.t =
        ""[@@bs.obj ]
    external component :
      (< a: int  ;b: string   >  Js.t, React.element) React.componentLike =
        "require(\"my-react-library\").MyReactComponent"[@@otherAttribute
                                                          (("bla")
                                                            [@reason.raw_literal
                                                              "bla"])]
  end
module type X_int  = sig val x : int end
module Functor(M:X_int) =
  struct
    let x = M.x + 1
    external makeProps :
      a:'a -> b:'b -> ?key:string -> unit -> < a: 'a  ;b: 'b   >  Js.t = ""
    [@@bs.obj ]
    let make =
      ((fun ~a ->
          ((fun ~b ->
              fun _ ->
                ((print_endline
                    (("This function should be named `Test$Func`")
                    [@reason.raw_literal
                      "This function should be named `Test$Func`"]) M.x;
                  ReactDOMRe.createDOMElementVariadic "div" [||])
                [@reason.preserve_braces ]))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Test_reason$Functor (Props : < a: 'a  ;b: 'b   >  Js.t) =
        make ~b:(Props ## b) ~a:(Props ## a) () in
      Test_reason$Functor
  end
