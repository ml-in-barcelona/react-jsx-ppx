let lower = ReactDOMRe.createDOMElementVariadic "div" [||]
let upper = React.createElement Input.make (Input.makeProps ())
let lower_with_empty_attr =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps ~className:(("")[@reason.raw_literal ""]) ())
    [||]
let lower_opt_attr =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps ?tabIndex ()) [||]
let lower_inner_html =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps
              ~dangerouslySetInnerHTML:([%bs.obj { __html = text }]) ()) 
    [||]
let lower_with_style =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps
              ~style:((ReactDOM.Style.make ~backgroundColor:(("gainsboro")
                         [@reason.raw_literal "gainsboro"]) ())
              [@reason.preserve_braces ]) ()) [||]
module React_component_without_props =
  struct
    external makeProps :
      lola:'lola ->
        cosis:'cosis ->
          ?key:string -> unit -> < lola: 'lola  ;cosis: 'cosis   >  Js.t = ""
    [@@bs.obj ]
    let make =
      ((fun ~lola ->
          ((fun ~cosis ->
              ((Js.log cosis;
                ((div
                    ~children:[((React.string lola)
                              [@reason.preserve_braces ])] ())
                [@JSX ]))
              [@reason.preserve_braces ]))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Test_reason$React_component_without_props
        (Props : < lola: 'lola  ;cosis: 'cosis   >  Js.t) =
        make ~cosis:(Props ## cosis) ~lola:(Props ## lola) in
      Test_reason$React_component_without_props
  end
let upper =
  React.createElement React_component_without_props.make
    (React_component_without_props.makeProps ~lola:(("flores")
       [@reason.raw_literal "flores"]) ())
external makeProps :
  ?name:'name -> ?key:string -> unit -> < name: 'name option   >  Js.t = ""
[@@bs.obj ]
let make =
  ((fun ?(name= (("")[@reason.raw_literal ""])) ->
      (([((div
             ~children:[((React.string
                            ((("First ")[@reason.raw_literal "First "]) ^
                               name))
                       [@reason.preserve_braces ])] ())
        [@JSX ]);
        ((Hello.createElement ~one:(("1")[@reason.raw_literal "1"])
            ~children:[((React.string
                           ((("2nd ")[@reason.raw_literal "2nd "]) ^ name))
                      [@reason.preserve_braces ])] ())
        [@JSX ])])
      [@reason.preserve_braces ][@JSX ]))
  [@warning "-16"])
let make =
  let Test_reason (Props : < name: 'name option   >  Js.t) =
    make ?name:(Props ## name) in
  Test_reason
external makeProps :
  ?name:'name -> ?key:string -> unit -> < name: 'name option   >  Js.t = ""
[@@bs.obj ]
let make =
  ((fun ?(name= (("")[@reason.raw_literal ""])) ->
      (([((div
             ~children:[((React.string
                            ((("First ")[@reason.raw_literal "First "]) ^
                               name))
                       [@reason.preserve_braces ])] ())
        [@JSX ]);
        ((Hello.createElement ~one:(("1")[@reason.raw_literal "1"])
            ~children:[((React.string
                           ((("2nd ")[@reason.raw_literal "2nd "]) ^ name))
                      [@reason.preserve_braces ])] ())
        [@JSX ])])
      [@reason.preserve_braces ][@JSX ]))
  [@warning "-16"])
let make =
  let Test_reason (Props : < name: 'name option   >  Js.t) =
    make ?name:(Props ## name) in
  Test_reason
module Memo =
  struct
    external makeProps :
      a:'a -> ?key:string -> unit -> < a: 'a   >  Js.t = ""[@@bs.obj ]
    let make =
      ((fun ~a ->
          ((div
              ~children:[(((Printf.sprintf (("`a` is %s")
                              [@reason.raw_literal "`a` is %s"]) a)
                             |> React.string)
                        [@reason.preserve_braces ])] ())
          [@reason.preserve_braces ][@JSX ]))
      [@warning "-16"])
    let make =
      React.memo
        (let Test_reason$Memo (Props : < a: 'a   >  Js.t) =
           make ~a:(Props ## a) in
         Test_reason$Memo)
  end
let fragment foo = (([foo])[@bla ][@JSX ])
let polyChildrenFragment foo bar = (([foo; bar])[@JSX ])
let nestedFragment foo bar baz = (([foo; (([bar; baz])[@JSX ])])[@JSX ])
let nestedFragmentWithlower foo = (([((div ~children:[foo] ())[@JSX ])])
  [@JSX ])
let upper = React.createElement Upper.make (Upper.makeProps ())
let upperWithProp =
  React.createElement Upper.make (Upper.makeProps ~count ())
let upperWithChild foo = ((Upper.createElement ~children:[foo] ())[@JSX ])
let upperWithChildren foo bar =
  ((Upper.createElement ~children:[foo; bar] ())[@JSX ])
let lower = ReactDOMRe.createDOMElementVariadic "div" [||]
let lowerWithChildAndProps foo =
  ((a ~tabIndex:1 ~href:(("https://example.com")
      [@reason.raw_literal "https://example.com"]) ~children:[foo] ())
  [@JSX ])
let lowerWithChildren foo bar = ((lower ~children:[foo; bar] ())[@JSX ])
let lowerWithChildrenComplex =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps ~className:(("flex-container")
              [@reason.raw_literal "flex-container"]) ())
    [|(ReactDOMRe.createDOMElementVariadic "div"
         ~props:(ReactDOMRe.domProps ~className:(("sidebar")
                   [@reason.raw_literal "sidebar"]) ())
         [|(ReactDOMRe.createDOMElementVariadic "h2"
              ~props:(ReactDOMRe.domProps ~className:(("title")
                        [@reason.raw_literal "title"]) ())
              [|(((("jsoo-react")[@reason.raw_literal "jsoo-react"]) |> s)
                [@reason.preserve_braces ])|]);(ReactDOMRe.createDOMElementVariadic
                                                  "nav"
                                                  ~props:(ReactDOMRe.domProps
                                                            ~className:(("menu")
                                                            [@reason.raw_literal
                                                              "menu"]) ())
                                                  [|(ReactDOMRe.createDOMElementVariadic
                                                       "ul"
                                                       [|(((examples |>
                                                              (List.map
                                                                 (fun e ->
                                                                    ((
                                                                    li
                                                                    ~key:((
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ])
                                                                    ~children:
                                                                    [((
                                                                    a
                                                                    ~href:((
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ])
                                                                    ~onClick:((
                                                                    fun event
                                                                    ->
                                                                    ((ReactEvent.Mouse.preventDefault
                                                                    event;
                                                                    ReactRouter.push
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ]))
                                                                    [@reason.preserve_braces
                                                                    ])
                                                                    ~children:
                                                                    [((
                                                                    e.title
                                                                    |> s)
                                                                    [@reason.preserve_braces
                                                                    ])] ())
                                                                    [@JSX ])]
                                                                    ())
                                                                    [@reason.preserve_braces
                                                                    ]
                                                                    [@JSX ]))))
                                                             |> React.list)
                                                         [@reason.preserve_braces
                                                           ])|])|])|])|]
let nestedElement =
  React.createElement Foo.Bar.make
    (Foo.Bar.makeProps ~a:1 ~b:(("1")[@reason.raw_literal "1"]) ())
let t =
  React.createElement FancyButton.make
    (FancyButton.makeProps ~ref:buttonRef
       ~children:(ReactDOMRe.createDOMElementVariadic "div" [||]) ())
let t =
  ReactDOMRe.createDOMElementVariadic "button"
    ~props:(ReactDOMRe.domProps ~ref ~className:(("FancyButton")
              [@reason.raw_literal "FancyButton"]) ()) [|children|]
external makeProps :
  children:'children ->
    buttonRef:'buttonRef ->
      ?key:string ->
        unit -> < children: 'children  ;buttonRef: 'buttonRef   >  Js.t = ""
[@@bs.obj ]
let make =
  ((fun ~children ->
      ((fun ~buttonRef ->
          ((button ~ref:buttonRef ~className:(("FancyButton")
              [@reason.raw_literal "FancyButton"]) ~children:[children] ())
          [@reason.preserve_braces ][@JSX ]))
      [@warning "-16"]))
  [@warning "-16"])
let make =
  React.forwardRef
    (let Test_reason
       (Props : < children: 'children  ;buttonRef: 'buttonRef   >  Js.t) =
       make ~buttonRef:(Props ## buttonRef) ~children:(Props ## children) in
     Test_reason)
let testAttributes =
  ReactDOMRe.createDOMElementVariadic "div"
    ~props:(ReactDOMRe.domProps ~translate:(("yes")
              [@reason.raw_literal "yes"]) ())
    [|(ReactDOMRe.createDOMElementVariadic "picture"
         ~props:(ReactDOMRe.domProps ~id:(("idpicture")
                   [@reason.raw_literal "idpicture"]) ())
         [|(ReactDOMRe.createDOMElementVariadic "img"
              ~props:(ReactDOMRe.domProps ~src:(("picture/img.png")
                        [@reason.raw_literal "picture/img.png"])
                        ~alt:(("test picture/img.png")
                        [@reason.raw_literal "test picture/img.png"])
                        ~id:(("idimg")[@reason.raw_literal "idimg"]) ()) 
              [||]);(ReactDOMRe.createDOMElementVariadic "source"
                       ~props:(ReactDOMRe.domProps ~type_:(("image/webp")
                                 [@reason.raw_literal "image/webp"])
                                 ~src:(("picture/img1.webp")
                                 [@reason.raw_literal "picture/img1.webp"])
                                 ()) [||]);(ReactDOMRe.createDOMElementVariadic
                                              "source"
                                              ~props:(ReactDOMRe.domProps
                                                        ~type_:(("image/jpeg")
                                                        [@reason.raw_literal
                                                          "image/jpeg"])
                                                        ~src:(("picture/img2.jpg")
                                                        [@reason.raw_literal
                                                          "picture/img2.jpg"])
                                                        ()) [||])|])|]
let randomElement =
  ReactDOMRe.createDOMElementVariadic "text"
    ~props:(ReactDOMRe.domProps ~dx:(("1 2")[@reason.raw_literal "1 2"])
              ~dy:(("3 4")[@reason.raw_literal "3 4"]) ()) [||]
external makeProps :
  name:'name ->
    ?isDisabled:'isDisabled ->
      ?key:string ->
        unit -> < name: 'name  ;isDisabled: 'isDisabled option   >  Js.t = ""
[@@bs.obj ]
let make =
  ((fun ~name ->
      ((fun ?isDisabled ->
          ((let onClick event = Js.log event in
            ((button ~name ~onClick ~disabled:isDisabled ~children:[] ())
              [@JSX ]))
          [@reason.preserve_braces ]))
      [@warning "-16"]))
  [@warning "-16"])
let make =
  let Test_reason
    (Props : < name: 'name  ;isDisabled: 'isDisabled option   >  Js.t) =
    make ?isDisabled:(Props ## isDisabled) ~name:(Props ## name) in
  Test_reason
external makeProps :
  ?name:'name -> ?key:string -> unit -> < name: 'name option   >  Js.t = ""
[@@bs.obj ]
let make =
  ((fun ?(name= (("joe")[@reason.raw_literal "joe"])) ->
      ((div
          ~children:[(((Printf.sprintf (("`name` is %s")
                          [@reason.raw_literal "`name` is %s"]) name)
                         |> React.string)
                    [@reason.preserve_braces ])] ())
      [@reason.preserve_braces ][@JSX ]))
  [@warning "-16"])
let make =
  let Test_reason (Props : < name: 'name option   >  Js.t) =
    make ?name:(Props ## name) in
  Test_reason
let () = Module.fn ()
let l = 33
let upperWithChildren =
  React.createElement Page.make
    (Page.makeProps ~moreProps:(("hgalo")[@reason.raw_literal "hgalo"])
       ~children:(ReactDOMRe.createDOMElementVariadic "h1"
                    [|((React.string (("Yep")[@reason.raw_literal "Yep"]))
                      [@reason.preserve_braces ])|]) ())
let lower_child_static =
  ReactDOMRe.createDOMElementVariadic "div"
    [|(ReactDOMRe.createDOMElementVariadic "span" [||])|]
let lower_child_ident = ReactDOMRe.createDOMElementVariadic "div" [|lolaspa|]
let lower_child_ident =
  ReactDOMRe.createDOMElementVariadic "div"
    [|(React.createElement App.make (App.makeProps ()))|]
let upper_child_expr =
  React.createElement Div.make
    (Div.makeProps ~children:((React.int 1)[@reason.preserve_braces ]) ())
let upper_child_lower =
  React.createElement Div.make
    (Div.makeProps
       ~children:(ReactDOMRe.createDOMElementVariadic "span" [||]) ())
let upper_child_ident =
  React.createElement Div.make (Div.makeProps ~children:lola ())
;;React.createElement MyComponent.make
    (MyComponent.makeProps ~booleanAttribute:true
       ~stringAttribute:(("string")[@reason.raw_literal "string"])
       ~intAttribute:1
       ?forcedOptional:((Some (("hello")[@reason.raw_literal "hello"]))
       [@reason.preserve_braces ][@explicit_arity ])
       ~onClick:((send handleClick)[@reason.preserve_braces ])
       ~children:(ReactDOMRe.createDOMElementVariadic "div"
                    [|(("hello")[@reason.raw_literal "hello"])|]) ())
;;ReactDOMRe.createDOMElementVariadic "p"
    [|((React.string greeting)[@reason.preserve_braces ])|]
let div =
  ReactDOMRe.createElement ReasonReact.fragment
    [|(ReactDOMRe.createDOMElementVariadic "div"
         ~props:(ReactDOMRe.domProps ~className:(("md:w-1/3")
                   [@reason.raw_literal "md:w-1/3"]) ()) [||]);(ReactDOMRe.createDOMElementVariadic
                                                                  "div"
                                                                  ~props:(
                                                                  ReactDOMRe.domProps
                                                                    ~className:(("md:w-2/3")
                                                                    [@reason.raw_literal
                                                                    "md:w-2/3"])
                                                                    ()) 
                                                                  [||])|]
;;React.createElement Link.make
    (Link.makeProps ~url:(("/hello")[@reason.raw_literal "/hello"])
       ~txt:(("hiya")[@reason.raw_literal "hiya"]) ())
